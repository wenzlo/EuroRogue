
buildscript {
	repositories {
		mavenCentral()
		maven { url 'https://jitpack.io' }
	}
	dependencies {
	// temporarily uses a JitPack dependency on a working version of Gretty until the next 3.x release
		classpath "com.github.tommyettinger.gretty:gretty:3.0.4.5"
	}
}
apply plugin: "gwt"
apply plugin: "war"
apply plugin: "org.gretty"

gwt {
	gwtVersion = "$gwtFrameworkVersion" // Should match the version used for building the GWT backend. See gradle.properties.
	maxHeapSize = '1G' // Default 256m is not enough for the GWT compiler. GWT is HUNGRY.
	minHeapSize = '1G'

	src = files(file('src/main/java')) // Needs to be in front of "modules" below.
	modules 'EuroRogue.GdxDefinition'
	devModules 'EuroRogue.GdxDefinitionSuperdev'
	project.webAppDirName = 'webapp'

	compiler.strict = true
	compiler.disableCastChecking = true
	//// The next line can be useful to uncomment if you want output that hasn't been obfuscated.
//	compiler.style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED
}

dependencies {
  api project(':core')
  api "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
  api "com.github.tommyettinger:gdx-backend-gwt:1.100.0"
  api "com.github.tommyettinger:gdx-backend-gwt:1.100.0:sources"
  api "com.badlogicgames.ashley:ashley:$ashleyVersion:sources"
  api "com.github.yellowstonegames.SquidLib:squidlib:$squidLibVersion:sources"
  api "com.github.yellowstonegames.SquidLib:squidlib-util:$squidLibUtilVersion:sources"
  api "com.github.tommyettinger:regexodus:$regExodusVersion:sources"
  api "com.github.tommyettinger:anim8-gdx:$anim8Version:sources"
  api "com.github.yellowstonegames.SquidLib:squidlib-extra:$squidLibExtraVersion:sources"

}

import org.akhikhl.gretty.AppBeforeIntegrationTestTask
import org.wisepersist.gradle.plugins.gwt.GwtSuperDev

gretty.httpPort = 8080
gretty.resourceBase = project.buildDir.path + "/gwt/draftOut"
gretty.contextPath = "/"
gretty.portPropertiesFileName = "TEMP_PORTS.properties"

task startHttpServer (dependsOn: [draftCompileGwt]) {
	doFirst {
		copy {
			from "webapp"
			into gretty.resourceBase
		}
		copy {
			from "war"
			into gretty.resourceBase
		}
	}
}
task beforeRun(type: AppBeforeIntegrationTestTask, dependsOn: startHttpServer) {
    // The next line allows ports to be reused instead of
    // needing a process to be manually terminated.
	file("build/TEMP_PORTS.properties").delete()
	// Somewhat of a hack; uses Gretty's support for wrapping a task in
	// a start and then stop of a Jetty server that serves files while
	// also running the SuperDev code server.
	integrationTestTask 'superDev'
	
	interactive false
}

task superDev(type: GwtSuperDev) {
	doFirst {
		gwt.modules = gwt.devModules
	}
}
// This next line can be changed if you want to, for instance, always build into the
// docs/ folder of a Git repo, which can be set to automatically publish on GitHub Pages.
// This is relative to the html/ folder.
var outputPath = "build/dist/"

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
		file(outputPath).mkdirs()
		copy {
			from("build/gwt/out"){
				exclude '**/*.symbolMap' // Not used by a dist, and these can be large.
			}
			into outputPath
		}
		copy {
			from("webapp") {
				exclude 'index.html' // We edit this HTML file later.
				exclude 'refresh.png' // We don't need this button; this saves some bytes.
			}
			into outputPath
			}
		copy {
			from("webapp") {
				// These next two lines take the index.html page and remove the superdev refresh button.
				include 'index.html'
				filter { String line -> line.replaceAll('<a class="superdev" .+', '') }
				// This does not modify the original index.html, only the copy in the dist.
			}
			into outputPath
			}
		copy {
			from "war"
			into outputPath
		}
	}
}

task addSource {
	doLast {
		sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
		
	}
}

task distZip(type: Zip, dependsOn: dist){
	//// This uses the output of the dist task, which removes the superdev buttons from index.html .
	from(outputPath)
	archiveBaseName.set("${appName}-dist")
	//// The result will be in html/build/ with a name containing "-dist".
	destinationDir(file("build"))
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)
tasks.checkGwt.dependsOn(addSource)
checkGwt.war = file("war")

//// You will need to change the next line to 11.0 if you use Java 11 language features.
sourceCompatibility = 8.0
sourceSets.main.java.srcDirs = [ "src/main/java/" ]

eclipse.project.name = appName + "-html"
